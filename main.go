package main

import (
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/gangtao/sweets/config"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/gangtao/sweets/docs" // docs is generated by Swag CLI, you have to import it.
)

var kvClient config.KVStore

// GetConfig
// @Summary get configuration
// @Description get configuration
// @Tags get
// @Accept json
// @Produce json
// @Param dataId query string true "data id of the config item"
// @Param group query string true "group of the config item"
// @Success 200 {string} string ""
// @Failure 500 {string} string ""
// @Router /cs/configs [get]
func GetConfig(c *gin.Context) {
	dataId := c.Query("dataId")
	group := c.Query("group")

	val, err := kvClient.GetConfig(dataId, group)
	if err != nil {
		//panic(err)
		c.String(http.StatusInternalServerError, "")
	} else {
		c.String(http.StatusOK, val)
	}
}

// PublishConfig
// @Summary publish configuration
// @Description publish configuration
// @Tags publish
// @Accept json
// @Produce json
// @Param dataId query string true "data id of the config item"
// @Param group query string true "group of the config item"
// @Param content query string true "content of the config item"
// @Success 200 {string} string "true"
// @Failure 500 {string} string "false"
// @Router /cs/configs [post]
func PublishConfig(c *gin.Context) {
	dataId := c.Query("dataId")
	group := c.Query("group")
	content := c.Query("content")

	err := kvClient.PublishConfig(dataId, group, content)
	if err != nil {
		c.String(http.StatusInternalServerError, "false")
	} else {
		c.String(http.StatusOK, "true")
	}
}

// DeleteConfig
// @Summary delete configuration
// @Description delete configuration
// @Tags delete
// @Accept json
// @Produce json
// @Param dataId query string true "data id of the config item"
// @Param group query string true "group of the config item"
// @Success 200 {string} string "true"
// @Failure 500 {string} string "false"
// @Router /cs/configs [delete]
func DeleteConfig(c *gin.Context) {
	dataId := c.Query("dataId")
	group := c.Query("group")

	err := kvClient.DeleteConfig(dataId, group)
	if err != nil {
		c.String(http.StatusInternalServerError, "false")
	} else {
		c.String(http.StatusOK, "true")
	}
}

// @title Sweets API
// @version 1.0
// @description This is a simple configuration service

// @contact.name gang tao
// @contact.email gang.tao@outlook.com

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /sweets/v1
func main() {
	kvType := os.Getenv("KV_TYPE")
	if kvType == "ZK" {
		kvClient = config.NewZKStore()
	} else {
		kvClient = config.NewEtcdStore()
	}

	router := gin.Default()

	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json")
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	router.GET("/sweets/v1/cs/configs", GetConfig)
	router.POST("/sweets/v1/cs/configs", PublishConfig)
	router.DELETE("/sweets/v1/cs/configs", DeleteConfig)

	router.Run() // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}